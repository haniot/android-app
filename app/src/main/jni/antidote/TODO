Roadmap/TODO
------------

Move sample/testing programs to their own sources

Remove wait_for_timeout obsolete item in comm plugin

Fragment healthd in several modules

System-ID: limit to 64 bits (transcoding plugins)

Make sure unknown attributes are properly dealt with
(i.e. ignored instead of provoking an error)

Connection/disconnection callback: move from plugins to core,
removing the need of having every plugin implementing a listener
for the application
(make every plugin implement those callbacks)

Add unit testing cases for Agent and PM-Store.

Add unit testing cases for GetConfiguration and PMStore ops

Timer alarm review

Transcoding:
	Blocking/rerouting of requests like PM-Store

Add System-Type-Spec-List (and others) for Agent

PMStore get wrong value x timeout

PMStore ROER

Implement "-1 = first PM-Store" idiom for ClearSegment and others

USB: SIGINT does not exit main loop when a USB device
     has been disconnected while reading

Add checksum to extended configuration cache file

Migrate from dbus-glib to glib-included bindings for
D-Bus (since glib 2.26).

Elimination of static and extern variables where possible.
Communication plugin struct and agent specialization code
are two examples of this kind (that we want to eliminate).

Simplification of confirmed request resending/timeout
reporting.

State machine: evaluate the possibility of removing
FSMEventData.


3) Low priority

ASN.1: writer stream (using in encoding) should not need
to know final msg size in advance.

ASN.1: In the other hand, when the developer *does* know
the final octet size, current behaviour should be kept,
so inconsistencies are detected (and should be reported
in a very agressive way, like quitting the app). For
example, oximeter data event report is "copied" from
spec, and octet lengths are there, and message has a
fixed size,  so it makes sense to use this information 
for increased cross-check.

ASN.1: structures which have a length argument should
calculate it dynamically upon encoding, not needing
manual pre-calculation of octet size.

ASN.1: eliminate the need of pre-encoding of certain
structures. APDU encoding should be done at once,
and writer/reader streams should not be necessary
at higher-level code like communication/association.c.

The need of pre-encoding normally happens because some
APDU structures have the "Any" element, which contains
pre-encoded data (whose actual type is opaque to
APDU final encoder).

So, this refactoring will mean removing the Any type,
replacing it by some other structure that can contain
a range of sub-structures, and is capable of
introspection (i.e. knowing which sub-structure it
contains, and how to encode/decode it).

Clearer, simpler rules of ownership, in particular when
involving APDU data. (This will be easier once the
need of pre-encoding Any types is eliminated.)

Search for FIXMEs and TODOs in code and deal with them

Try to reduce module coupling, with is currently very high.

Try to remove 'special' state machine handling code from
manager.c and agent.c; state machines should operate as
autonomously as possible. Create more states to achieve
that, if needed.

Improve timeout cases that could be handled by plug-in
(e.g. HDP reconnections)
